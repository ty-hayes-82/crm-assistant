# yaml-language-server: $schema=https://raw.githubusercontent.com/google/adk-python/main/src/google/adk/agents/config_schemas/AgentConfig.json

# This YAML defines the top-level coordinator and its sub-agents.
# Note how tools are registered on the agents that actually use them.

name: JiraCoordinator
agent_class: DelegatingAgent
description: A Jira project assistant that delegates to specialist agents.
type: delegating
model: gemini-2.5-flash
instruction: >
  You are a Jira project assistant. Delegate to RiskMonitor, DataCleaner,
  Reporter, or AdHocQuery based on the user's request.

# All tools are defined at the top level for the coordinator to delegate.
tools:
    - name: summarize_jira_csv
      type: python
      module: yaml_agent.mcp_bridge
      function: call_mcp_tool
      fixedArgs: { tool_name: "summarize_jira_csv" }
      description: Get a high-level summary of the Jira CSV including total issues, projects, and statuses.

    - name: get_jira_status_breakdown
      type: python
      module: yaml_agent.mcp_bridge
      function: call_mcp_tool
      fixedArgs: { tool_name: "get_jira_status_breakdown" }
      description: Get the distribution of issues by status (Done, In Progress, Backlog, etc.).

    - name: get_jira_assignee_workload
      type: python
      module: yaml_agent.mcp_bridge
      function: call_mcp_tool
      fixedArgs: { tool_name: "get_jira_assignee_workload" }
      description: Get workload distribution showing how many issues are assigned to each person.

    - name: search_jira_issues
      type: python
      module: yaml_agent.mcp_bridge
      function: call_mcp_tool
      fixedArgs: { tool_name: "search_jira_issues" }
      description: Search for issues containing specific text in summaries or descriptions.

    - name: find_stale_issues
      type: python
      module: yaml_agent.mcp_bridge
      function: call_mcp_tool
      fixedArgs: { tool_name: "find_stale_issues_in_project" }
      description: Finds issues that have not been updated recently.

    - name: find_blocked_issues
      type: python
      module: yaml_agent.mcp_bridge
      function: call_mcp_tool
      fixedArgs: { tool_name: "find_blocked_issues_in_project" }
      description: Finds issues that are marked as blocked.

    - name: find_due_soon_issues
      type: python
      module: yaml_agent.mcp_bridge
      function: call_mcp_tool
      fixedArgs: { tool_name: "find_due_soon_issues_in_project" }
      description: Finds issues that are due in the near future.

    - name: find_unassigned_issues
      type: python
      module: yaml_agent.mcp_bridge
      function: call_mcp_tool
      fixedArgs: { tool_name: "find_unassigned_issues_in_project" }
      description: Finds issues that have no assignee.

    - name: find_missing_fields
      type: python
      module: yaml_agent.mcp_bridge
      function: call_mcp_tool
      fixedArgs: { tool_name: "find_issues_with_missing_fields" }
      description: Finds issues with missing story points, labels, or epics.

    - name: suggest_data_fixes
      type: python
      module: yaml_agent.mcp_bridge
      function: call_mcp_tool
      fixedArgs: { tool_name: "suggest_data_fixes" }
      description: Takes a list of issues with missing fields and suggests concrete fixes.

    - name: request_human_approval
      type: python
      module: yaml_agent.mcp_bridge
      function: request_human_approval
      description: Presents a textual summary of proposed changes to the user and requires them to type 'yes' or 'no'.

    - name: apply_jira_updates
      type: python
      module: yaml_agent.mcp_bridge
      function: call_mcp_tool
      fixedArgs: { tool_name: "apply_bulk_jira_updates" }
      description: Applies updates to a set of Jira issues (e.g., setting story points).

sub_agents:
    - name: RiskMonitor
      agent_class: SequentialAgent
      type: sequential
      sub_agents:
        - name: RiskChecks
          agent_class: ParallelAgent
          type: parallel
          sub_agents:
            - name: FindStale
              agent_class: LlmAgent
              model: gemini-2.5-flash
              instruction: Find stale Jira issues.
              tools: [find_stale_issues]
            - name: FindBlocked
              agent_class: LlmAgent
              model: gemini-2.5-flash
              instruction: Find blocked Jira issues.
              tools: [find_blocked_issues]
            - name: FindDueSoon
              agent_class: LlmAgent
              model: gemini-2.5-flash
              instruction: Find issues due soon.
              tools: [find_due_soon_issues]
            - name: FindUnassigned
              agent_class: LlmAgent
              model: gemini-2.5-flash
              instruction: Find unassigned issues.
              tools: [find_unassigned_issues]
        - name: RiskSynthesizer
          agent_class: LlmAgent
          model: gemini-2.5-flash
          instruction: >
            Review the lists of issues in session.state (stale_issues, blocked_issues, etc.)
            and create a short, actionable summary for the project manager.

    - name: DataCleaner
      agent_class: SequentialAgent
      type: sequential
      sub_agents:
        - name: FindMissingFields
          agent_class: LlmAgent
          model: gemini-2.5-flash
          instruction: Detects issues with missing fields and writes to state key 'missing_fields'.
          tools: [find_missing_fields]
          output_key: missing_fields_result
        - name: FixSuggester
          agent_class: LlmAgent
          model: gemini-2.5-flash
          instruction: >
            Based on the list of issues with missing fields from the previous step (in state key 'missing_fields_result'),
            generate a human-readable summary of proposed fixes.
          tools: [suggest_data_fixes]
          output_key: suggested_fixes_result
        - name: HumanApproval
          agent_class: LlmAgent
          model: gemini-2.5-flash
          instruction: >
            Take the suggested fixes from the previous step (in state key 'suggested_fixes_result') and
            present them to the user for confirmation using the request_human_approval tool.
          tools: [request_human_approval]
          output_key: approved_fixes_result
        - name: ApplyUpdates
          agent_class: LlmAgent
          model: gemini-2.5-flash
          instruction: >
            Take the approved fixes from the previous step (in state key 'approved_fixes_result')
            and apply them using the apply_jira_updates tool. If the value indicates rejection, do nothing.
          tools: [apply_jira_updates]

    - name: Reporter
      agent_class: LlmAgent
      model: gemini-2.5-flash
      instruction: Create reports and summaries from Jira data.
      tools: [get_jira_status_breakdown, get_jira_assignee_workload]

    - name: AdHocQuery
      agent_class: LlmAgent
      model: gemini-2.5-flash
      instruction: Answer ad-hoc questions about Jira.
      tools: [search_jira_issues, summarize_jira_csv]
